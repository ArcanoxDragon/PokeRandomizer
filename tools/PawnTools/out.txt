                    default:
                        throw new ArgumentException("Invalid Command ID");
                    case AmxOpCode.LOAD_PRI:
                    case AmxOpCode.LOAD_ALT:
                    case AmxOpCode.LREF_PRI:
                    case AmxOpCode.LREF_ALT:
                    case AmxOpCode.STOR_PRI:
                    case AmxOpCode.STOR_ALT:
                    case AmxOpCode.SREF_PRI:
                    case AmxOpCode.SREF_ALT:
                    case AmxOpCode.INC:
                    case AmxOpCode.DEC:
                    {
                        // Peek at next value
                        var next = (int)cmd[i++];
                        // Check Value against negative and zero... ?

                        op = EA(c, next);
                        break;
                    }
                    case AmxOpCode.LOAD_S_PRI:
                    case AmxOpCode.LOAD_S_ALT:
                    case AmxOpCode.LREF_S_PRI:
                    case AmxOpCode.LREF_S_ALT:
                    case AmxOpCode.STOR_S_PRI:
                    case AmxOpCode.STOR_S_ALT:
                    case AmxOpCode.SREF_S_PRI:
                    case AmxOpCode.SREF_S_ALT:
                    case AmxOpCode.INC_S:
                    case AmxOpCode.DEC_S:
                    {
                        // Peek at next value
                        var next = (int)cmd[i++];
                        // Check Value against negative... ?

                        op = EA(c, next);
                        break;
                    }
                    case AmxOpCode.LOAD_I:
                    case AmxOpCode.STOR_I:
                    case AmxOpCode.LIDX:
                    case AmxOpCode.IDXADDR:
                    case AmxOpCode.MOVE_PRI:
                    case AmxOpCode.MOVE_ALT:
                    case AmxOpCode.XCHG:
                    case AmxOpCode.PUSH_PRI:
                    case AmxOpCode.PUSH_ALT:
                    case AmxOpCode.POP_PRI:
                    case AmxOpCode.POP_ALT:
                    case AmxOpCode.PROC: // Begin
                    case AmxOpCode.RET:
                    case AmxOpCode.RETN: // Return
                    case AmxOpCode.SHL:
                    case AmxOpCode.SHR:
                    case AmxOpCode.SSHR:
                    case AmxOpCode.SMUL:
                    case AmxOpCode.SDIV:
                    case AmxOpCode.SDIV_ALT:
                    case AmxOpCode.UMUL:
                    case AmxOpCode.UDIV:
                    case AmxOpCode.UDIV_ALT:
                    case AmxOpCode.ADD: // Add?
                    case AmxOpCode.SUB:
                    case AmxOpCode.SUB_ALT:
                    case AmxOpCode.AND: // Cmp?
                    case AmxOpCode.OR:
                    case AmxOpCode.XOR:
                    case AmxOpCode.NOT:
                    case AmxOpCode.NEG:
                    case AmxOpCode.INVERT:
                    case AmxOpCode.ZERO_PRI: // ClearAll
                    case AmxOpCode.ZERO_ALT:
                    case AmxOpCode.SIGN_PRI:
                    case AmxOpCode.SIGN_ALT:
                    case AmxOpCode.EQ:
                    case AmxOpCode.NEQ:
                    case AmxOpCode.LESS:
                    case AmxOpCode.LEQ:
                    case AmxOpCode.GRTR:
                    case AmxOpCode.GEQ:
                    case AmxOpCode.SLESS:
                    case AmxOpCode.SLEQ:
                    case AmxOpCode.SGRTR:
                    case AmxOpCode.SGEQ:
                    case AmxOpCode.INC_PRI:
                    case AmxOpCode.INC_ALT:
                    case AmxOpCode.INC_I:
                    case AmxOpCode.DEC_PRI:
                    case AmxOpCode.DEC_ALT:
                    case AmxOpCode.DEC_I:
                    case AmxOpCode.SYSREQ_PRI:
                    case AmxOpCode.SWAP_PRI:
                    case AmxOpCode.SWAP_ALT:
                    case AmxOpCode.NOP:
                    case AmxOpCode.BREAK: // LineNo?
                    case AmxOpCode.LODB_P_I:
                    case AmxOpCode.CONST_P_PRI: // PushConst2
                    case AmxOpCode.CONST_P_ALT: // CmpConst2
                    case AmxOpCode.ADDR_P_PRI:
                    case AmxOpCode.ADDR_P_ALT:
                    case AmxOpCode.STRB_P_I:
                    case AmxOpCode.LIDX_P_B:
                    case AmxOpCode.IDXADDR_P_B:
                    case AmxOpCode.ALIGN_P_PRI:
                    case AmxOpCode.ALIGN_P_ALT:
                    case AmxOpCode.PUSH_P_C: // PushConst
                    case AmxOpCode.PUSH_P:
                    case AmxOpCode.PUSH_P_S:
                    case AmxOpCode.STACK_P: // AdjustStack
                    case AmxOpCode.HEAP_P:
                    case AmxOpCode.SHL_P_C_PRI:
                    case AmxOpCode.SHL_P_C_ALT:
                    case AmxOpCode.SHR_P_C_PRI:
                    case AmxOpCode.SHR_P_C_ALT:
                    case AmxOpCode.ADD_P_C:
                    case AmxOpCode.SMUL_P_C:
                    case AmxOpCode.ZERO_P:
                    case AmxOpCode.ZERO_P_S: // CmpLocal
                    case AmxOpCode.EQ_P_C_PRI: // CmpConst
                    case AmxOpCode.EQ_P_C_ALT:
                    case AmxOpCode.MOVS_P:
                    case AmxOpCode.CMPS_P:
                    case AmxOpCode.FILL_P:
                    case AmxOpCode.HALT_P:
                    case AmxOpCode.BOUNDS_P:
                    case AmxOpCode.PUSH_P_ADR:
                    {
                        // no sanity checks
                        var arg = (short)(c >> 16);

                        op = EA(c & 0xFF, arg);

                        if ((c & 0xFF) == 0x30) // return
                            op += Environment.NewLine;
                        break;
                    }
                    case AmxOpCode.LODB_I:
                    case AmxOpCode.CONST_PRI:
                    case AmxOpCode.CONST_ALT:
                    case AmxOpCode.ADDR_PRI:
                    case AmxOpCode.ADDR_ALT:
                    case AmxOpCode.STRB_I:
                    case AmxOpCode.LIDX_B:
                    case AmxOpCode.IDXADDR_B:
                    case AmxOpCode.ALIGN_PRI:
                    case AmxOpCode.ALIGN_ALT:
                    case AmxOpCode.LCTRL:
                    case AmxOpCode.SCTRL:
                    case AmxOpCode.PICK:
                    case AmxOpCode.PUSH_C: // PushConst
                    case AmxOpCode.PUSH:
                    case AmxOpCode.PUSH_S:
                    case AmxOpCode.STACK:
                    case AmxOpCode.HEAP:
                    case AmxOpCode.JREL:
                    case AmxOpCode.SHL_C_PRI:
                    case AmxOpCode.SHL_C_ALT:
                    case AmxOpCode.SHR_C_PRI:
                    case AmxOpCode.SHR_C_ALT:
                    case AmxOpCode.ADD_C:
                    case AmxOpCode.SMUL_C:
                    case AmxOpCode.ZERO:
                    case AmxOpCode.ZERO_S:
                    case AmxOpCode.EQ_C_PRI:
                    case AmxOpCode.EQ_C_ALT:
                    case AmxOpCode.MOVS:
                    case AmxOpCode.CMPS:
                    case AmxOpCode.FILL:
                    case AmxOpCode.HALT:
                    case AmxOpCode.BOUNDS:
                    case AmxOpCode.PUSH_ADR:
                    {
                        var next = (int)cmd[i++];
                        // No sanity check needed

                        op = EA(c, next);
                        break;
                    }

                    case AmxOpCode.CALL: // CallFunc
                    case AmxOpCode.JUMP:
                    case AmxOpCode.JZER: // Jump!=
                    case AmxOpCode.JNZ: // Jump==
                    case AmxOpCode.JEQ:
                    case AmxOpCode.JNEQ:
                    case AmxOpCode.JLESS:
                    case AmxOpCode.JLEQ:
                    case AmxOpCode.JGRTR:
                    case AmxOpCode.JGEQ:
                    case AmxOpCode.JSLESS:
                    case AmxOpCode.JSLEQ:
                    case AmxOpCode.JSGRTR:
                    case AmxOpCode.JSGEQ:
                    case AmxOpCode.SWITCH: // Jump
                    {
                        var delta = (int)cmd[i++];
                        // sanity check range...
                        // negative.. weird

                        int newOfs = (line * 4) + delta;
                        op = $"{Commands[c]} => 0x{newOfs:X4} ({delta})";
                        break;
                    }
                    case AmxOpCode.SYSREQ_C:
                    {
                        var next = (int)cmd[i++];
                        sanityMode |= 1;                       // flag mode 1

                        op = EA(c, next);
                        break;
                    }
                    case AmxOpCode.CASETBL: // JumpIfElse
                    {
                        //var jOffset = (i * 4) - 4; // this may be the correct jump start point...
                        var count = cmd[i++]; // switch case table
                        // sanity check

                        // Populate If-Case Tree
                        var tree = new List<string>();

                        // Cases
                        for (int j = 0; j < count; j++)
                        {
                            var jmp = (int)cmd[i++];
                            var toOffset = ((i - 2) * 4) + jmp;
                            var ifValue = (int)cmd[i++];
                            tree.Add($"\t{ifValue} => 0x{toOffset:X4} ({jmp})");
                        }
                        // Default
                        {
                            int jmp = (int)cmd[i++];
                            var toOffset = ((i - 2) * 4) + jmp;
                            tree.Add($"\t* => 0x{toOffset:X4} ({jmp})");
                        }

                        op = Commands[c] + Environment.NewLine + string.Join(Environment.NewLine, tree);
                        break;
                    }
                    case AmxOpCode.SYSREQ_N:
                    {
                        var next1 = (int)cmd[i++];
                        var next2 = (int)cmd[i++];
                        sanityMode |= 2;                       // flag mode 2

                        op = EA(c, next1, next2);
                        break;
                    }

                    case AmxOpCode.PUSH2_C:
                    case AmxOpCode.PUSH2:
                    case AmxOpCode.PUSH2_S:
                    case AmxOpCode.PUSH2_ADR:
                    case AmxOpCode.CONST:
                    case AmxOpCode.CONST_S:
                    {
                        var next1 = (int)cmd[i++];
                        var next2 = (int)cmd[i++];

                        op = EA(c, next1, next2);
                        break;
                    }

                    case AmxOpCode.PUSH3_C:
                    case AmxOpCode.PUSH3:
                    case AmxOpCode.PUSH3_S:
                    case AmxOpCode.PUSH3_ADR:
                    {
                        var next1 = cmd[i++];
                        var next2 = cmd[i++];
                        var next3 = cmd[i++];

                        op = EF(c, next1, next2, next3);
                        break;
                    }

                    case AmxOpCode.PUSH4_C:
                    case AmxOpCode.PUSH4:
                    case AmxOpCode.PUSH4_S:
                    case AmxOpCode.PUSH4_ADR:
                    {
                        var next1 = (int)cmd[i++];
                        var next2 = (int)cmd[i++];
                        var next3 = (int)cmd[i++];
                        var next4 = (int)cmd[i++];

                        op = EA(c, next1, next2, next3, next4);
                        break;
                    }

                    case AmxOpCode.PUSH5_C: // float
                    case AmxOpCode.PUSH5:
                    case AmxOpCode.PUSH5_S:
                    case AmxOpCode.PUSH5_ADR:
                    {
                        var next1 = cmd[i++];
                        var next2 = cmd[i++];
                        var next3 = cmd[i++];
                        var next4 = cmd[i++];
                        var next5 = cmd[i++];

                        op = EF(c, next1, next2, next3, next4, next5);
                        break;
                    }

                    case AmxOpCode.LOAD_BOTH:
                    {
                        var next1 = (int)cmd[i++];
                        var next2 = (int)cmd[i++];
                        // a bunch of sanity checking

                        op = EA(c, next1, next2);
                        break;
                    }

                    case AmxOpCode.LOAD_S_BOTH: // Copy
                    {
                        var next1 = (int)cmd[i++];
                        var next2 = (int)cmd[i++];
                        // a bunch of sanity checking

                        op = EA(c, next1, next2);
                        break;
                    }

                    case AmxOpCode.ICALL:
                    {
                        var next1 = (int)cmd[i++];
                        // perm check a1 + 0x14
                        // can return error code 0x1C

                        op = EA(c, next1);
                        break;
                    }

                    case AmxOpCode.IRETN:
                    {
                        // perm check a1 + 0x14
                        // same permission checking as 0x9E
                        // can return error code 0x1C

                        op = EA(c);
                        break;
                    }

                    case AmxOpCode.ICASETBL: // Goto
                    {
                        // minimal sanity checks
                        // can return error code 0x1C
                        int newPos = i + (int)(1 + (2 * (cmd[i] / 4)) + 1);

                        op = EA(c, newPos);
                        break;
                    }

                    case AmxOpCode.LOAD_P_PRI: // GetGlobal2
                    case AmxOpCode.LOAD_P_ALT: // GetGlobal
                    case AmxOpCode.LREF_P_PRI:
                    case AmxOpCode.LREF_P_ALT:
                    case AmxOpCode.STOR_P_PRI: // SetGlobal
                    case AmxOpCode.STOR_P_ALT:
                    case AmxOpCode.SREF_P_PRI:
                    case AmxOpCode.SREF_P_ALT:
                    case AmxOpCode.INC_P:
                    case AmxOpCode.DEC_P:
                    {
                        // sanity check arg
                        var arg = (short)(c >> 16);

                        op = EA(c & 0xFF, arg);
                        break;
                    }
                    case AmxOpCode.LOAD_P_S_PRI: // GetGlobal4
                    case AmxOpCode.LOAD_P_S_ALT:
                    case AmxOpCode.LREF_P_S_PRI:
                    case AmxOpCode.LREF_P_S_ALT:
                    case AmxOpCode.STOR_P_S_PRI: // SetLocal
                    case AmxOpCode.STOR_P_S_ALT:
                    case AmxOpCode.SREF_P_S_PRI:
                    case AmxOpCode.SREF_P_S_ALT:
                    case AmxOpCode.INC_P_S:
                    case AmxOpCode.DEC_P_S:
                    {
                        // sanity check arg, slightly different
                        var arg = (short)(c >> 16);

                        op = EA(c & 0xFF, arg);
                        break;
                    }
